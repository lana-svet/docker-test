"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RMQMessageFactory = exports.RMQExplorer = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const metadata_scanner_1 = require("@nestjs/core/metadata-scanner");
const rmq_metadata_accessor_1 = require("./rmq-metadata.accessor");
const router_emmiter_1 = require("./emmiters/router.emmiter");
const constants_1 = require("./constants");
const rmq_extended_message_class_1 = require("./classes/rmq-extended-message.class");
const rmq_error_class_1 = require("./classes/rmq-error.class");
const class_validator_1 = require("class-validator");
let RMQExplorer = class RMQExplorer {
    constructor(discoveryService, metadataAccessor, metadataScanner) {
        this.discoveryService = discoveryService;
        this.metadataAccessor = metadataAccessor;
        this.metadataScanner = metadataScanner;
    }
    onModuleInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.explore();
        });
    }
    explore() {
        const instanceWrappers = [
            ...this.discoveryService.getControllers(),
            ...this.discoveryService.getProviders(),
        ];
        instanceWrappers.forEach((wrapper) => {
            const { instance } = wrapper;
            if (!instance || !Object.getPrototypeOf(instance)) {
                return;
            }
            this.metadataScanner.scanFromPrototype(instance, Object.getPrototypeOf(instance), (key) => this.lookupRMQRoute(instance, key));
        });
    }
    lookupRMQRoute(instance, key) {
        const methodRef = instance[key];
        const options = this.metadataAccessor.getRMQOptions(methodRef);
        const path = this.metadataAccessor.getRMQPath(methodRef);
        if (!path || !options) {
            return;
        }
        this.metadataAccessor.addRMQPath(path);
        this.attachEmitter(path, options, instance, methodRef);
    }
    attachEmitter(path, options, instance, methodRef) {
        router_emmiter_1.requestEmitter.on(path, (msg) => __awaiter(this, void 0, void 0, function* () {
            const messageParams = this.metadataAccessor.getRMQMessageIndexes(Object.getPrototypeOf(instance), methodRef.name);
            try {
                const funcArgs = (options === null || options === void 0 ? void 0 : options.msgFactory)
                    ? options.msgFactory(msg)
                    : exports.RMQMessageFactory(msg);
                if (messageParams.length > 0) {
                    for (const param of messageParams) {
                        funcArgs[param] = new rmq_extended_message_class_1.ExtendedMessage(msg);
                    }
                }
                const error = yield this.validateRequest(instance, methodRef, funcArgs);
                if (error) {
                    router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.error, msg, new rmq_error_class_1.RMQError(error, constants_1.ERROR_TYPE.RMQ));
                    router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.ack, msg);
                    return;
                }
                const result = yield methodRef.apply(instance, funcArgs);
                if (msg.properties.replyTo && result) {
                    router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.success, msg, result);
                }
                else if (msg.properties.replyTo && result === undefined) {
                    router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.error, msg, new rmq_error_class_1.RMQError(constants_1.ERROR_UNDEFINED_FROM_RPC, constants_1.ERROR_TYPE.RMQ));
                }
            }
            catch (err) {
                if (msg.properties.replyTo) {
                    router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.error, msg, err);
                }
            }
            if (!(options === null || options === void 0 ? void 0 : options.manualAck)) {
                router_emmiter_1.responseEmitter.emit(router_emmiter_1.ResponseEmitterResult.ack, msg);
            }
        }));
    }
    validateRequest(instance, methodRef, funcArgs) {
        return __awaiter(this, void 0, void 0, function* () {
            const validateMsg = this.metadataAccessor.getRMQValidation(methodRef);
            if (!validateMsg) {
                return;
            }
            const types = Reflect.getMetadata('design:paramtypes', Object.getPrototypeOf(instance), methodRef.name);
            const classData = funcArgs[0];
            const test = Object.assign(new types[0](), classData);
            const errors = yield class_validator_1.validate(test);
            if (errors.length) {
                const message = errors
                    .map((m) => {
                    return Object.values(m.constraints).join('; ');
                })
                    .join('; ');
                return message;
            }
        });
    }
};
RMQExplorer = __decorate([
    common_1.Injectable(),
    __metadata("design:paramtypes", [core_1.DiscoveryService,
        rmq_metadata_accessor_1.RMQMetadataAccessor,
        metadata_scanner_1.MetadataScanner])
], RMQExplorer);
exports.RMQExplorer = RMQExplorer;
const RMQMessageFactory = (msg) => {
    return [JSON.parse(msg.content.toString())];
};
exports.RMQMessageFactory = RMQMessageFactory;
