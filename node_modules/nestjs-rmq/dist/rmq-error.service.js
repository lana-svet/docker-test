"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RmqErrorService = void 0;
const common_1 = require("@nestjs/common");
const os_1 = require("os");
const rmq_error_handler_class_1 = require("./classes/rmq-error-handler.class");
const constants_1 = require("./constants");
let RmqErrorService = class RmqErrorService {
    constructor(options) {
        this.options = options;
    }
    buildError(error) {
        if (!error) {
            return null;
        }
        let errorHeaders = {};
        errorHeaders['-x-error'] = error.message;
        errorHeaders['-x-host'] = os_1.hostname();
        errorHeaders['-x-service'] = this.options.serviceName;
        if (this.isRMQError(error)) {
            errorHeaders = Object.assign(Object.assign({}, errorHeaders), { '-x-status-code': error.code, '-x-data': error.data, '-x-type': error.type });
        }
        return errorHeaders;
    }
    errorHandler(msg) {
        const { headers } = msg.properties;
        if (this.options.errorHandler) {
            return this.options.errorHandler.handle(headers);
        }
        return rmq_error_handler_class_1.RMQErrorHandler.handle(headers);
    }
    isRMQError(error) {
        return error.code !== undefined;
    }
};
RmqErrorService = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(constants_1.RMQ_MODULE_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], RmqErrorService);
exports.RmqErrorService = RmqErrorService;
